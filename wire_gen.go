// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/fabriciolfj/loan-service-go/adapters"
	"github.com/fabriciolfj/loan-service-go/configuration"
	"github.com/fabriciolfj/loan-service-go/controller"
	"github.com/fabriciolfj/loan-service-go/listeners"
	"github.com/fabriciolfj/loan-service-go/producers"
	"github.com/fabriciolfj/loan-service-go/repositories"
	"github.com/fabriciolfj/loan-service-go/usecases"
)

// Injectors from wire.go:

func InitControllerLoanWire() (*controller.LoanController, error) {
	db := configuration.ProviderDataBase()
	loanRepository := repositories.ProviderLoanRepository(db)
	saveLoanAdapter := adapters.ProvideSaveLoanAdapter(loanRepository)
	kafkaProperties, err := configuration.ProvideKafkaProperties()
	if err != nil {
		return nil, err
	}
	kafkaConfig, err := configuration.ProvideKafkaConfig(kafkaProperties)
	if err != nil {
		return nil, err
	}
	loanProcessProducer, err := producers.ProviderLoanProcessProducer(kafkaConfig)
	if err != nil {
		return nil, err
	}
	loanNotifyPendingAdapter := adapters.ProvideLoanNotifyPendingAdapter(loanProcessProducer)
	processLoanUseCase := usecases.ProviderProcessLoanUseCase(saveLoanAdapter, loanNotifyPendingAdapter)
	findLoanAdapter := adapters.ProvideFindLoanAdapter(loanRepository)
	getLoanUseCase := usecases.ProviderGetLoanUseCase(findLoanAdapter)
	loanController, err := controller.ProviderLoanController(processLoanUseCase, getLoanUseCase)
	if err != nil {
		return nil, err
	}
	return loanController, nil
}

func InitListenerProcessLoanWire() (*listeners.LoanProcessListener, error) {
	kafkaProperties, err := configuration.ProvideKafkaProperties()
	if err != nil {
		return nil, err
	}
	kafkaConfig, err := configuration.ProvideKafkaConfig(kafkaProperties)
	if err != nil {
		return nil, err
	}
	loanProcessListener, err := listeners.ProviderLoanProcessListener(kafkaConfig)
	if err != nil {
		return nil, err
	}
	return loanProcessListener, nil
}
